import functools
from collections import Counter
from kivy.uix.label import Label
from kivy.properties import StringProperty
from kivy.graphics.vertex_instructions import Rectangle
from kivy.lang import Builder
from kivy.graphics.context_instructions import Color
from kivy.uix.image import Image
from kivy.clock import Clock
from kivy.animation import Animation
from kivy.base import runTouchApp
from kivy.uix.widget import Widget
from kivy.core.window import Window
from kivy.uix.button import Button
from random import random
from kivy.lang import Builder
from kivy.base import runTouchApp
from kivy.uix.image import Image
from kivy.uix.scrollview import ScrollView
from kivy.graphics import Rotate
from kivy.properties import NumericProperty
import random
from math import atan2, degrees
from kivy.animation import Animation
from time import sleep
from kivy.properties import (
    NumericProperty, ReferenceListProperty, ObjectProperty
)

Builder.load_string('''
<Rook>:
    coin: coin_1
    daiver: player
    block: block
    scr: game
    block2: block2
    startw: startw
    fishsw: fishsw
    stwr1:  stwr1
    stwr2:  stwr2
    stwl1:  stwl1
    stwl2:  stwl2
    shark: shark
    pause: pause
    restart: restart
    prod: prod
    bt1: bt1
    bt2: bt2
    level1: level1
    level2: level2
    level3: level3
    chooselevel: chooselevel
    BackGround:
        size: root.size
    Shark:
        id: shark
        size: root.size
    FishSword:
        id: fishsw
        size: root.size
    Daiver:
        id: player
        size: root.size
        #pos: 300, 300
    ButtonMove:
        id: bt1
        size: root.size
        pos: root.pos
    ButtonMove2:
        id: bt2
        size: root.size
        pos: root.pos
    StoneWall1Right:
        id: stwr1
        size: root.size
    StoneWall2Right:
        id: stwr2
        size: root.size
    StoneWall1Left:
        id: stwl1
        size: root.size
    StoneWall2Left: 
        id: stwl2
        size: root.size
    Coin:
        id: coin_1
        size: root.size
    Block:
        id: block
        size: root.size 
    Block2:
        id: block2
        size: root.size 
    Pause:
        id: pause
        size: root.size
    Prodol:
        id: prod
        size: root.size
    Restart:
        id: restart
        size: root.size
    GameOver:
        id: game
        size: root.size 
    StartWindow:
        id: startw
        size: root.size
    ChooseLevel:
        id: chooselevel
        size: root.size
    Level1:
        id: level1
        size: root.size
    Level2:
        id: level2
        size: root.size
    Level3:
        id: level3
        size: root.size
<StartWindow>:
    Image:
        source: 'start_window.jpg'
        allow_stretch: True
        keep_ratio: False
        pos: root.pos
<ChooseLevel>:
    Image:
        source: 'choose_the_level.png'
        allow_stretch: True
        keep_ratio: False
        pos: root.pos
<Level1>:
    Image:
        source: 'level1.png'
        allow_stretch: True
        keep_ratio: False
        pos: root.pos
<Level2>:
    Image:
        source: 'level2.png'
        allow_stretch: True
        keep_ratio: False
        pos: root.pos
<Level3>:
    Image:
        source: 'level3.png'
        allow_stretch: True
        keep_ratio: False
        pos: root.pos
<BackGround>:
    Image:
        source: 'sea_deep..png'
        allow_stretch: True
        keep_ratio: False
<Shark>:
    Image:
        source: 'Shark.png'
        allow_stretch: True
        keep_ratio: False
        pos: root.pos
<Daiver>:
    Image:
        source: 'Дайвер.png'
        allow_stretch: True
        keep_ratio: False
        pos: root.pos

<ButtonMove>:
    opacity: 0
    canvas:
        Color:
            rgb: 255, 255, 255
        Rectangle:
            size: self.size
            pos: self.pos
<ButtonMove2>:
    opacity: 0
    canvas:
        Color:
            rgb: 255, 255, 0
        Rectangle:
            size: self.size
            pos: self.pos
<Pause>:
    Image:
        source: 'pause.png'
        allow_stretch: True
        keep_ratio: False
        pos: root.pos
<StoneWall1Right>:
    Image:
        source: 'stone.png'
        allow_stretch: True
        keep_ratio: False
        pos: root.pos
<StoneWall2Right>:
    Image:
        source: 'stone.png'
        allow_stretch: True
        keep_ratio: False
        pos: root.pos
<StoneWall1Left>:
    Image:
        source: 'stone.png'
        allow_stretch: True
        keep_ratio: False
        pos: root.pos
<StoneWall2Left>:
    Image:
        source: 'stone.png'
        allow_stretch: True
        keep_ratio: False
        pos: root.pos
<Coin>:
    Image:
        source: 'coin.png'
        allow_stretch: True
        keep_ratio: False
        pos: root.pos
<Block>:
    Image:
        source: 'stone.png'
        allow_stretch: True
        keep_ratio: False
        pos: root.pos
<Block2>:
    Image:
        source: 'stone.png'
        allow_stretch: True
        keep_ratio: False
        pos: root.pos
<FishSword>:
    Image:
        source: 'fishsword.png'
        allow_stretch: True
        keep_ratio: False
        pos: root.pos
<Prodol>:
    Image:
        source: 'countinue.png'
        allow_stretch: True
        keep_ratio: False
        pos: root.pos   
<Restart>:
    Image:
        source: 'restartmini.png'
        allow_stretch: True
        keep_ratio: False
        pos: root.pos 
<GameOver>:
    Image:
        source: 'restart.png'
        allow_stretch: True
        keep_ratio: False
        pos: root.pos

''')


class Rook(Widget):
    coin = ObjectProperty(None)
    daiver = ObjectProperty(None)
    block = ObjectProperty(None)  # -
    scr = ObjectProperty(None)
    block2 = ObjectProperty(None)  # _
    startw = ObjectProperty(None)
    fishsw = ObjectProperty(None)  # |
    stwr1 = ObjectProperty(None)
    stwr2 = ObjectProperty(None)
    stwl1 = ObjectProperty(None)
    stwl2 = ObjectProperty(None)
    shark = ObjectProperty(None)
    bt1 = ObjectProperty(None)
    bt2 = ObjectProperty(None)
    prod = ObjectProperty(None)
    restart = ObjectProperty(None)
    pause = ObjectProperty(None)
    chooselevel = ObjectProperty(None)
    level1 = ObjectProperty(None)
    level2 = ObjectProperty(None)
    level3 = ObjectProperty(None)
    widg = []
    allmatrix = [[['_', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', '-'],
                  ['_', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', '-'],
                  ['_', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', '-'],
                  ['_', ' ', ' ', ' ', ' '],
                  ['_', ' ', ' ', ' ', ' '],
                  ['_', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', '|', ' '],
                  ['_', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', '-'],
                  ['_', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', '-'],
                  ['_', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', '-'],
                  ['_', ' ', ' ', ' ', ' '],
                  ['_', ' ', ' ', ' ', ' '],
                  ['_', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', '|', ' ']
                  ],
                 [[' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', '|', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', '|', ' ']],
                 [[' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', ' ', ' '],
                  [' ', ' ', ' ', '|', ' ']]]

    def __init__(self, **kwargs):
        super(Rook, self).__init__(**kwargs)
        Clock.schedule_interval(self.check, 1 / 60)
        Clock.schedule_once(self.zadach)

    matrix = [[1]]

    def check(self, *args):
        self.daiver.d(self.coin, self.block, self.block2, self.fishsw)
        self.widg = [self.level1.cl, self.level2.cl, self.level3.cl]
        if self.daiver.y < -1 * Window.height // 3 or self.daiver.tfish is True:
            # self.daiver.velocity = [0, 0]
            self.scr.move()
            self.coin.velocity = [0, 0]
            self.block2.velocity = [0, 0]
            self.block.velocity = [0, 0]
            self.fishsw.velocity = [0, 0]
            self.stwr1.velocity = [0, 0]
            self.stwr2.velocity = [0, 0]
            self.stwl1.velocity = [0, 0]
            self.stwl2.velocity = [0, 0]
            self.shark.velocity = [0, 0]
            self.daiver.tfish = False
        if self.scr.cl is True:
            self.scr.cl = False
            self.scr.x = -10000000000
            self.daiver.x = 300
            self.daiver.y = 0
            self.zadach(1)
            self.coin.velocity = [0, 10]
            self.block2.velocity = [0, 10]
            self.block.velocity = [0, 10]
            self.fishsw.velocity = [0, 10]
            self.coin.x = -10000000
            self.block2.x = -100000
            self.block.x = -100000
            self.fishsw.x = -10000
            self.coin.y = Window.height
            self.block2.y = Window.height
            self.block.y = Window.height
            self.fishsw.y = Window.height
            self.stwl1.velocity = [0, 10]
            self.stwl2.velocity = [0, 10]
            self.stwr1.velocity = [0, 10]
            self.stwr2.velocity = [0, 10]
            self.block.checkzd = True
            self.block2.checkzd = True
            self.fishsw.checkzd = True
        if self.block.checkzd is False and self.block2.checkzd is False and self.fishsw.checkzd is False:
            self.scr.move()
            self.coin.velocity = [0, 0]
            self.block2.velocity = [0, 0]
            self.block.velocity = [0, 0]
            self.fishsw.velocity = [0, 0]
            self.stwr1.velocity = [0, 0]
            self.stwr2.velocity = [0, 0]
            self.stwl1.velocity = [0, 0]
            self.stwl2.velocity = [0, 0]
            self.shark.velocity = [0, 0]
            self.daiver.tfish = False
        if self.pause.cl is True:
            self.pause.cl = False
            self.coin.velocity = [0, 0]
            self.block2.velocity = [0, 0]
            self.block.velocity = [0, 0]
            self.fishsw.velocity = [0, 0]
            self.stwr1.velocity = [0, 0]
            self.stwr2.velocity = [0, 0]
            self.stwl1.velocity = [0, 0]
            self.stwl2.velocity = [0, 0]
            self.shark.velocity = [0, 0]
            self.daiver.tfish = False
            self.restart.move()
            self.prod.move()
            self.chooselevel.move2()
            self.coin.velocity = [0, 0]
            self.bt1.x = 100000
            self.bt2.x = 1000000
        if self.prod.cl is True:
            self.prod.cl = False
            self.prod.x = 10000000
            self.restart.x = 10000000
            self.pause.x = 10
            self.pause.y = Window.height - Window.height // 10 // 2
            self.coin.velocity = [0, 10]
            self.block2.velocity = [0, 10]
            self.block.velocity = [0, 10]
            self.fishsw.velocity = [0, 10]
            self.daiver.tfish = False
            self.bt1.x = 0
            self.bt2.x = Window.width // 2
        if self.restart.cl is True:
            self.restart.cl = False
            self.zadach(1)
            self.scr.cl = False
            self.scr.x = -10000000000
            self.coin.velocity = [0, 10]
            self.block2.velocity = [0, 10]
            self.block.velocity = [0, 10]
            self.fishsw.velocity = [0, 10]
            self.coin.x = -10000000
            self.block2.x = -100000
            self.block.x = -100000
            self.fishsw.x = -10000
            self.coin.y = Window.height
            self.block2.y = Window.height
            self.block.y = Window.height
            self.fishsw.y = Window.height
            self.stwl1.velocity = [0, 10]
            self.stwl2.velocity = [0, 10]
            self.stwr1.velocity = [0, 10]
            self.stwr2.velocity = [0, 10]
            self.block.checkzd = True
            self.block2.checkzd = True
            self.fishsw.checkzd = True
            self.bt1.x = 0
            self.bt2.x = Window.width // 2
        if self.chooselevel.cl:
            print(1)
            self.prod.x = 10000000
            self.restart.x = 10000000
            self.chooselevel.cl = False
            self.chooselevel.move()
            self.level1.move()
            self.level2.move()
            self.level3.move()
        if True in self.widg:
            c = 0
            for i in range(len(self.widg)):
                if self.widg[i]:
                    c = i
                    break
            self.level3.cl = self.level1.cl = self.level2.cl = False
            self.level3.x = self.level1.x = self.level2.x = Window.width * 100
            self.startw.move()
            self.coin.velocity = [0, 10]
            self.block2.velocity = [0, 10]
            self.block.velocity = [0, 10]
            self.fishsw.velocity = [0, 10]
            self.matrix = self.allmatrix[c]
            self.zadach()
            self.prod.cl = False
            self.prod.x = 10000000
            self.restart.x = 10000000
            self.pause.x = 10
            self.pause.y = Window.height - Window.height // 10 // 2
            self.coin.velocity = [0, 10]
            self.block2.velocity = [0, 10]
            self.block.velocity = [0, 10]
            self.fishsw.velocity = [0, 10]
            self.daiver.tfish = False
            self.bt1.x = 0
            self.bt2.x = Window.width // 2

    a = 0

    def zadach(self, *args):
        self.a = Window.width // len(self.matrix[0])
        zd = []
        zd2 = []
        zdf = []
        for i in range(len(self.matrix)):
            a = self.matrix[i].count('-')
            if a >= 1:
                zd.append([self.matrix[i].index('-') + 1, i + 1])
            a = self.matrix[i].count('_')
            if a >= 1:
                zd2.append([self.matrix[i].index('_') + 1, i + 1])
            a = self.matrix[i].count('|')
            if a >= 1:
                for j in range(len(self.matrix[i])):
                    if self.matrix[i][j] == '|':
                        zdf.append([j + 1, i + 1])
        self.block.opr(zd, self.a)
        self.block2.opr(zd2, self.a)
        self.fishsw.opr(zdf, self.a)


class BackGround(Widget):
    def do_layout(self, *args):
        number_of_children = len(self.children)
        width = self.width
        width_per_child = width // number_of_children
        positions = range(0, width, width_per_child)
        for position, child in zip(positions, self.children):
            child.height = self.height
            child.x = self.x + position
            child.y = self.y
            child.width = width_per_child

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(BackGround, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(BackGround, self).remove_widget(widget)
        self.do_layout()


class Daiver(Widget):
    c = 0
    velocity = [0, 5]
    tfish = False

    def __init__(self, **kwargs):
        self.x = 300
        self.y = 0
        super(Daiver, self).__init__(**kwargs)
        Clock.schedule_interval(self.move, 1 / 60)

    def move(self, *args):
        if Window.width // 10 < self.x + self.velocity[0] < Window.width - Window.width // 5 - Window.width // 10:
            self.x += self.velocity[0]
        if Window.height - Window.height // 3 - Window.height // 4 > self.y + self.velocity[
            1] < Window.height + Window.height // 3:
            self.y += self.velocity[1]

    def do_layout(self, *args):
        for i in self.children:
            i.height = Window.height // 3
            i.width = Window.width // 5

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(Daiver, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(Daiver, self).remove_widget(widget)
        self.do_layout()

    def move_left(self):
        self.velocity[0] = -10

    def move_right(self):
        self.velocity[0] = 10

    def d(self, coin, block, block2, fish1):
        if coin.x < self.x + Window.width // 5 and coin.x + Window.width // 12 > self.x and coin.y + Window.height // 10 > self.y and coin.y < self.y + Window.height // 3:
            coin.y = Window.height
            coin.x = random.randint(Window.width // 10, Window.width - Window.width // 10 - Window.width // 10)
        if (
                block.x < self.x + Window.width // 5 and block.x + Window.width // 2 - Window.width // 10 > self.x and block.y < self.y + Window.height // 3 and block.y + Window.width // 10 > self.y):
            if self.velocity[0] > 0:
                self.velocity[0] = 0
                self.velocity[1] = 10
        if (
                block2.x + Window.width // 4 + Window.width // 10 - 10 < self.x + Window.width // 5 and block2.x + Window.width // 4 + Window.width // 10 > self.x and block2.y < self.y + Window.height // 3 and block2.y + Window.width // 10 > self.y):
            if self.velocity[0] < 0:
                self.velocity[0] = 0
                self.velocity[1] = 10
        if (
                block.x < self.x + Window.width // 5 and block.x + Window.width // 2 - Window.width // 10 > self.x and block.y < self.y + Window.height // 3 and block.y > self.y) or (
                block2.x < self.x + Window.width // 5 and block2.x + Window.width // 4 + Window.width // 10 > self.x and block2.y < self.y + Window.height // 3 and block2.y + Window.height // 10 > self.y):
            self.velocity[1] = -10
        else:
            self.velocity[1] = 5
        if fish1.x < self.x + Window.width // 5 and fish1.x + Window.width // 3 > self.x and fish1.y + Window.height // 3 > self.y and fish1.y < self.y + Window.height // 3:
            self.tfish = True


class ButtonMove(Widget):
    def __init__(self, **kwargs):
        super(ButtonMove, self).__init__(**kwargs)
        self.x = 1000000000000000000000000000000000

    def do_layout(self, *args):
        self.height = Window.height // 3
        self.width = Window.width // 2

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(ButtonMove, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(ButtonMove, self).remove_widget(widget)
        self.do_layout()

    def on_touch_down(self, touch):
        if self.collide_point(*touch.pos):
            a = Daiver()
            a.move_left()

    def a(self):
        return 0, Window.width - Window.width // 10


class ButtonMove2(Widget):
    def do_layout(self, *args):
        self.height = Window.height // 3
        self.width = Window.width // 2
        self.x = Window.width // 2

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(ButtonMove2, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(ButtonMove2, self).remove_widget(widget)
        self.do_layout()

    def __init__(self, **kwargs):
        super(ButtonMove2, self).__init__(**kwargs)
        self.x = 1000000000000000000000000000000000

    def on_touch_down(self, touch):
        if self.collide_point(*touch.pos):
            a = Daiver()
            a.move_right()


class StoneWall1Right(Widget):
    velocity = [0, 10]

    def do_layout(self, *args):
        for i in self.children:
            i.height = Window.height * 1.5
            i.width = Window.width // 10

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(StoneWall1Right, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(StoneWall1Right, self).remove_widget(widget)
        self.do_layout()

    def __init__(self, **kwargs):
        super(StoneWall1Right, self).__init__(**kwargs)
        Clock.schedule_interval(self.move, 1 / 60)

    def move(self, *args):
        if self.y <= -1 * Window.height:
            self.y = Window.height
        self.y -= self.velocity[1]

    def a(self):
        return Window.width - Window.width // 10


class StoneWall2Right(Widget):
    c = 0
    velocity = [0, 10]

    def do_layout(self, *args):
        for i in self.children:
            i.height = Window.height * 1.5
            i.width = Window.width // 10

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(StoneWall2Right, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(StoneWall2Right, self).remove_widget(widget)
        self.do_layout()

    def __init__(self, **kwargs):
        super(StoneWall2Right, self).__init__(**kwargs)
        Clock.schedule_interval(self.move, 1 / 60)

    def move(self, *args):
        if self.c == 0:
            self.y = Window.height
        if self.y <= -1 * Window.height:
            self.y = Window.height
        self.y -= self.velocity[1]
        self.c += 1

    def a(self):
        return Window.height


class StoneWall1Left(Widget):
    velocity = [0, 10]

    def do_layout(self, *args):
        for i in self.children:
            i.height = Window.height * 1.5
            i.width = Window.width // 10

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(StoneWall1Left, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(StoneWall1Left, self).remove_widget(widget)
        self.do_layout()

    def __init__(self, **kwargs):
        super(StoneWall1Left, self).__init__(**kwargs)
        Clock.schedule_interval(self.move, 1 / 60)

    def move(self, *args):
        if self.y <= -1 * Window.height:
            self.y = Window.height
        self.y -= self.velocity[1]
        if self.x != Window.width - Window.width // 10:
            self.x = Window.width - Window.width // 10

    def a(self):
        return Window.width - Window.width // 10


class StoneWall2Left(Widget):
    c = 0
    velocity = [0, 10]

    def do_layout(self, *args):
        for i in self.children:
            i.height = Window.height * 1.5
            i.width = Window.width // 10

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(StoneWall2Left, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(StoneWall2Left, self).remove_widget(widget)
        self.do_layout()

    def __init__(self, **kwargs):
        super(StoneWall2Left, self).__init__(**kwargs)
        Clock.schedule_interval(self.move, 1 / 60)

    def move(self, *args):
        if self.c == 0:
            self.y = Window.height
        if self.y <= -1 * Window.height:
            self.y = Window.height
        self.y -= self.velocity[1]
        self.c += 1
        if self.x != Window.width - Window.width // 10:
            self.x = Window.width - Window.width // 10

    def a(self):
        return Window.height


class Coin(Widget):
    velocity = [0, 10]

    def do_layout(self, *args):
        for i in self.children:
            i.height = Window.height // 10
            i.width = Window.width // 12

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(Coin, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(Coin, self).remove_widget(widget)
        self.do_layout()

    def __init__(self, **kwargs):
        super(Coin, self).__init__(**kwargs)
        self.y = Window.height
        self.x = random.randint(Window.width // 10, Window.width - Window.width // 10 - Window.width // 10)
        Clock.schedule_interval(self.move, 1 / 60)

    def move(self, *args):
        if self.y <= 0 - Window.height // 8:
            self.y = Window.height
            self.x = random.randint(Window.width // 10, Window.width - Window.width // 10 - Window.width // 10)
        self.y -= self.velocity[1]


class Block(Widget):
    checkzd = True
    velocity = [0, 0]
    zadach = [[1000, Window.height], [1000, Window.height]]
    b = 1

    def do_layout(self, *args):
        for i in self.children:
            i.height = Window.width // 10
            i.width = Window.width // 2 - Window.width // 10

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(Block, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(Block, self).remove_widget(widget)
        self.do_layout()

    def __init__(self, **kwargs):
        super(Block, self).__init__(**kwargs)
        if len(self.zadach) != 0:
            self.x = self.zadach[0][0]
            self.y = self.zadach[0][1]
            self.checkzd = True
            del self.zadach[0]
        else:
            self.checkzd = False
        Clock.schedule_interval(self.move, 1 / 60)

    def move(self, *args):
        self.y -= self.velocity[1]
        for i in range(len(self.zadach)):
            self.zadach[i][1] -= self.velocity[1]
        if self.y < -1 * Window.width // 10:
            if len(self.zadach) != 0:
                self.x = self.zadach[0][0]
                self.y = self.zadach[0][1]
                self.checkzd = True
                del self.zadach[0]
            else:
                self.checkzd = False

    def opr(self, a, b):
        self.zadach, self.b = a, b
        for i in self.zadach:
            i[0] = Window.width // 2
            i[1] *= Window.height


class Block2(Widget):
    checkzd = True
    velocity = [0, 0]
    zadach = [[0, Window.height], [Window.width - Window.width // 3, Window.height]]
    b = 1

    def do_layout(self, *args):
        for i in self.children:
            i.height = Window.width // 10
            i.width = Window.width // 4 + Window.width // 10

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(Block2, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(Block2, self).remove_widget(widget)
        self.do_layout()

    def __init__(self, **kwargs):
        super(Block2, self).__init__(**kwargs)
        if len(self.zadach) != 0:
            self.x = self.zadach[0][0]
            self.y = self.zadach[0][1]
            self.checkzd = True
            del self.zadach[0]
        else:
            self.checkzd = False
        Clock.schedule_interval(self.move, 1 / 60)

    def move(self, *args):
        self.y -= self.velocity[1]
        for i in range(len(self.zadach)):
            self.zadach[i][1] -= self.velocity[1]
        if self.y < -1 * Window.width // 10:
            if len(self.zadach) != 0:
                self.x = self.zadach[0][0]
                self.y = self.zadach[0][1]
                self.checkzd = True
                del self.zadach[0]
            else:
                self.checkzd = False

    def opr(self, a, b):
        self.zadach, self.b = a, b
        for i in self.zadach:
            i[0] = Window.width // 10
            i[1] *= Window.height


class GameOver(Widget):
    cl = False

    def do_layout(self, *args):
        for i in self.children:
            i.height = Window.height
            i.width = Window.width

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(GameOver, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(GameOver, self).remove_widget(widget)
        self.do_layout()

    def __init__(self, **kwargs):
        super(GameOver, self).__init__(**kwargs)
        self.x = -1 * Window.width * 10
        self.y = -1 * Window.height * 10

    def move(self):
        self.x = 0
        self.y = 0

    def on_touch_down(self, touch):
        if self.collide_point(*touch.pos):
            self.cl = True
            self.x = -1 * Window.width * 10
            self.y = -1 * Window.height * 10


class Shark(Widget):
    velocity = [0, 0]

    def do_layout(self, *args):
        for i in self.children:
            i.height = Window.height // 5
            i.width = Window.width // 5

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(Shark, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(Shark, self).remove_widget(widget)
        self.do_layout()

    def __init__(self, **kwargs):
        super(Shark, self).__init__(**kwargs)
        x = random.randint(-6 * (Window.width // 5), -1 * Window.width // 5)
        y = random.randint(Window.width, Window.width // 5 * 5)
        self.x = random.randint(x, y)
        self.y = random.randint(Window.height // 3, Window.height + Window.height // 5)
        self.velocity = [random.randint(5, 10), 10]
        Clock.schedule_interval(self.move, 1 / 60)

    def move(self, *args):
        self.y -= self.velocity[1]
        self.x -= self.velocity[1]
        if self.y < -1 * Window.height // 5:
            x = random.randint(-60 * Window.width // 5, -1 * Window.width // 5)
            y = random.randint(Window.width, Window.width // 5 * 10)
            self.x = random.randint(x, y)
            self.y = random.randint(Window.height // 3, Window.height + Window.height // 5)
            self.velocity = [random.randint(1, 5), 10]


class StartWindow(Widget):
    b = 0

    def do_layout(self, *args):
        for i in self.children:
            i.height = Window.height
            i.width = Window.width

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(StartWindow, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(StartWindow, self).remove_widget(widget)
        self.do_layout()

    def move(self):
        self.x += 100000000
        self.y += 10000000000000


class StartButtton(Widget):
    b = 0

    def do_layout(self, *args):
        for i in self.children:
            i.height = Window.height // 10
            i.width = Window.width // 5

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(StartButtton, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(StartButtton, self).remove_widget(widget)
        self.do_layout()

    def on_touch_down(self, touch):
        if self.collide_point(*touch.pos):
            self.b += 1
            self.x = Window.width * 1000000
            self.y = Window.height * 11000000

    def __init__(self, **kwargs):
        super(StartButtton, self).__init__(**kwargs)
        self.x = Window.width // 2 - (Window.width // 5 // 2)
        self.y = Window.height // 2 + (Window.height // 5)

    def move(self):
        self.x = Window.width * 1000000
        self.y = Window.height * 11000000


class FishSword(Widget):
    checkzd = True
    zadach = [[-100000, -100000]]
    a = 100000000000
    velocity = [0, 0]

    def do_layout(self, *args):
        for i in self.children:
            i.height = Window.height // 3
            i.width = Window.width // 3

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(FishSword, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(FishSword, self).remove_widget(widget)
        self.do_layout()

    def opr(self, zd, a):
        self.zadach, self.a = zd, a
        for i in self.zadach:
            i[0] *= self.a - Window.width // 10
            i[1] *= Window.height

    def __init__(self, **kwargs):
        super(FishSword, self).__init__(**kwargs)
        if len(self.zadach) != 0:
            self.x = self.zadach[0][0]
            self.y = self.zadach[0][1]
            self.checkzd = True
            del self.zadach[0]
        else:
            self.checkzd = False
        Clock.schedule_interval(self.move, 1 / 60)

    def move(self, *args):
        self.y -= self.velocity[1]
        for i in range(len(self.zadach)):
            self.zadach[i][1] -= self.velocity[1]
        if self.y < -1 * Window.width // 10:
            if len(self.zadach) != 0:
                self.x = self.zadach[0][0]
                self.y = self.zadach[0][1]
                self.checkzd = True
                del self.zadach[0]
            else:
                self.checkzd = False


class Pause(Widget):
    cl = False

    def do_layout(self, *args):
        for i in self.children:
            i.height = Window.height // 10
            i.width = Window.width // 10

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(Pause, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(Pause, self).remove_widget(widget)
        self.do_layout()

    def __init__(self, **kwargs):
        super(Pause, self).__init__(**kwargs)
        self.x = 10
        self.y = Window.height - self.height // 2

    def on_touch_down(self, touch):
        if self.collide_point(*touch.pos):
            self.cl = True
            self.x = -1000000


class Prodol(Widget):
    cl = False

    def do_layout(self, *args):
        for i in self.children:
            i.height = Window.height // 5
            i.width = Window.width // 3

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(Prodol, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(Prodol, self).remove_widget(widget)
        self.do_layout()

    def move(self):
        self.x = Window.width // 2 - Window.width // 3 // 2
        self.y = Window.height // 2 - Window.height // 5

    def on_touch_down(self, touch):
        if self.collide_point(*touch.pos):
            self.cl = True

    def __init__(self, **kwargs):
        super(Prodol, self).__init__(**kwargs)
        self.x = -100000000
        print(self.height, self.width)


class Restart(Widget):
    cl = False

    def do_layout(self, *args):
        for i in self.children:
            i.height = Window.height // 8
            i.width = Window.width // 3

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(Restart, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(Restart, self).remove_widget(widget)
        self.do_layout()

    def move(self):
        self.x = Window.width // 2 - Window.width // 3 // 2
        self.y = Window.height // 2 + Window.height // 8

    def on_touch_down(self, touch):
        if self.collide_point(*touch.pos):
            self.cl = True

    def __init__(self, **kwargs):
        super(Restart, self).__init__(**kwargs)
        self.x = -100000000


class ChooseLevel(Widget):
    cl = False

    def do_layout(self, *args):
        for i in self.children:
            i.height = Window.height // 10
            i.width = Window.width // 5

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(ChooseLevel, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(ChooseLevel, self).remove_widget(widget)
        self.do_layout()

    def __init__(self, **kwargs):
        super(ChooseLevel, self).__init__(**kwargs)
        self.x = Window.width // 2 - (Window.width // 5 // 2)
        self.y = Window.height // 2 - (Window.height // 10 // 2)

    def move(self):
        self.x = 1000000

    def move2(self):
        self.x = Window.width // 2 - Window.width // 3 // 2
        self.y = Window.height // 2 - (Window.height // 8 + Window.height // 10 + 50) - 100

    def on_touch_down(self, touch):
        if self.collide_point(*touch.pos):
            self.cl = True


class Level1(Widget):
    cl = False

    def do_layout(self, *args):
        for i in self.children:
            i.height = Window.height // 10
            i.width = Window.width // 5

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(Level1, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(Level1, self).remove_widget(widget)
        self.do_layout()

    def __init__(self, **kwargs):
        super(Level1, self).__init__(**kwargs)
        self.x = Window.width * 100
        self.y = Window.height // 2 - (Window.height // 10 // 2)

    def move(self):
        self.x = Window.width // 2 - (Window.width // 5 // 2)
        self.y = Window.height - (Window.height // 10 + 100)

    def on_touch_down(self, touch):
        if self.collide_point(*touch.pos):
            self.cl = True
            self.x = Window.width * 100


class Level2(Widget):
    cl = False

    def do_layout(self, *args):
        for i in self.children:
            i.height = Window.height // 10
            i.width = Window.width // 5

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(Level2, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(Level2, self).remove_widget(widget)
        self.do_layout()

    def __init__(self, **kwargs):
        super(Level2, self).__init__(**kwargs)
        self.x = Window.width * 100
        self.y = Window.height - (Window.height // 10 * 2 + 200)

    def move(self):
        self.x = Window.width // 2 - (Window.width // 5 // 2)

        self.y = Window.height - (Window.height // 10 * 2 + 200)

    def on_touch_down(self, touch):
        if self.collide_point(*touch.pos):
            self.cl = True
            self.x = Window.width * 100


class Level3(Widget):
    cl = False

    def do_layout(self, *args):
        for i in self.children:
            i.height = Window.height // 10
            i.width = Window.width // 5

    def on_size(self, *args):
        self.do_layout()

    def on_pos(self, *args):
        self.do_layout()

    def add_widget(self, widget):
        super(Level3, self).add_widget(widget)
        self.do_layout()

    def remove_widget(self, widget):
        super(Level3, self).remove_widget(widget)
        self.do_layout()

    def __init__(self, **kwargs):
        super(Level3, self).__init__(**kwargs)
        self.x = Window.width * 100
        self.y = Window.height - (Window.height // 10 * 3 + 400)

    def move(self):
        self.x = Window.width // 2 - (Window.width // 5 // 2)

        self.y = Window.height - (Window.height // 10 * 3 + 400)

    def on_touch_down(self, touch):
        if self.collide_point(*touch.pos):
            self.cl = True
            self.x = Window.width * 100


runTouchApp(Rook())
